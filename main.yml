- name: "{{ playbook_name | default('inqwise automation toolkit playbook') }}"
  hosts: all
  become: yes  # Use sudo to execute tasks

  collections:
    - inqwise.common

  vars_files:
    - defaults.yml

  tasks:
  - block:
  
    - name: Install mc
      ansible.builtin.package:
        name:
          - 'mc'
        state: present
      tags: installation  

    - name: Include main vars
      ansible.builtin.include_vars:
        dir: vars/main
        files_matching: "{{ environment_id }}.yml"
      tags: always

    - name: Include credentials vars
      ansible.builtin.include_vars:
        dir: vars/credentials
        files_matching: "{{ environment_id }}.yml"
      tags: always

    - name: Include users and groups vars
      ansible.builtin.include_vars:
        file: access.yml
        name: access
      tags: always

    - name: add groups to access
      ansible.builtin.set_fact:
        access: >-
          {{
            access | combine({
              'users_groups': (access.users_groups | default([])) | union(users_groups)
            })
          }}
      when: users_groups is defined
      tags: always

    - name: Initialize empty access.users_groups if not defined
      ansible.builtin.set_fact:
        access: "{{ access | combine({'users_groups': []}) }}"
      when: access.users_groups is not defined
      tags: always

    - name: Add users to access
      ansible.builtin.set_fact:
        access: >-
          {{
            access | combine({
              'users': (access.users | default([])) | union(users)
            })
          }}
      when: users is defined
      tags: always


    - name: Debuging users
      ansible.builtin.debug:
        var: users
        verbosity: 1
      tags: debug

    - name: Users and Groups
      ansible.builtin.include_role:
        name: users
        apply:
          tags: 
            - installation
            - configuration
      vars:
        users_groups: &groups "{{ access.users_groups }}"
        users: &users "{{ access.users }}"
        users_group_list: *groups
        users_user_list: *users
      when: access.users_groups is defined and access.users is defined
      tags: 
        - installation
        - configuration

    - name: Active interfaces role
      ansible.builtin.import_role:
        name: ansible_utils
        tasks_from: active_interfaces

    - name: Load webhook vars
      ansible.builtin.include_role:
        name: discord
        tasks_from: load_vars_by_url
      tags: configuration
      vars:
        webhooks_file_url: "{{ internal_base_url }}/discord/webhooks.yml"
      when: internal_base_url is defined

    - name: Skip if internal_base_url is undefined
      ansible.builtin.debug:
        msg: "internal_base_url is undefined."
      when: internal_base_url is undefined
      tags: configuration

    - name: Telegraf
      ansible.builtin.include_role:
        name: telegraf
      vars:
        telegraf_agent_hostname: "{{ ansible_fqdn }}"
        telegraf_agent_external_interval: True
      when: telegraf_config_uri is defined and not (telegraf_last | default(false))
      tags: 
        - installation
        - configuration

    - name: Stuff
      ansible.builtin.import_tasks: stuff.yml
    
    # option to install telegraf after stuff
    - name: Telegraf
      ansible.builtin.include_role:
        name: telegraf
      vars:
        telegraf_agent_hostname: "{{ ansible_fqdn }}"
        telegraf_agent_external_interval: True
      when: telegraf_config_uri is defined and telegraf_last | default(false)
      tags: 
        - installation
        - configuration

    - name: On terminate role
      ansible.builtin.include_role:
        name: on_terminate
        apply:
          tags: configuration
      when: (on_terminate_script_contents is defined and on_terminate_script_contents | length > 0) or (on_terminate_script_paths is defined and on_terminate_script_paths | length > 0)
      tags: configuration

    - name: Flush
      ansible.builtin.include_role: 
        name: flush_handlers
        apply:
          tags: configuration
      tags: configuration
    
    - name: Notify AWS postactions
      debug: 
        msg: aws postactions
      changed_when: yes
      notify: "aws postactions"
      when: notify_aws_postactions | default(false)
      tags: configuration

    - name: Define message webhook
      ansible.builtin.set_fact:
        discord_webhook: "{{ discord_webhooks.deploy | default(discord_webhooks.default) }}"
      when: discord_webhooks is defined
      tags: configuration

    - name: Send success message
      ansible.builtin.include_role:
        name: discord
        apply:
          tags: configuration
      tags: configuration

    rescue:
      - name: Insure that ansible_failed_result or ansible_failed_task defined (Workaround for known bug)
        set_fact:
          ansible_failed_result: "Operation failed due to a missing file. Please check the logs for detailed information."
        when: not (ansible_failed_result is defined or ansible_failed_task is defined)
        tags: always

      - name: Define message webhook
        ansible.builtin.set_fact:
          discord_webhook: "{{ discord_webhooks.deploy | default(discord_webhooks.default) }}"
        when: discord_webhooks is defined
        tags: configuration

      - name: Send fail message
        ansible.builtin.include_role:
          name: discord
          apply:
            tags: configuration
        tags: configuration
        
      - name: re-raise the error
        ansible.builtin.fail:
          msg: "{{ ansible_failed_result.msg | default(ansible_failed_result | to_json) }}"
        when: ansible_failed_result is defined
        tags: always